[gd_scene load_steps=6 format=3 uid="uid://dnnq6e08lqpyo"]

[ext_resource type="Texture2D" uid="uid://byiwkxevc228r" path="res://Temporary Sprites/Characters/Free Chicken Sprites.png" id="1_4o7h1"]

[sub_resource type="GDScript" id="GDScript_2ilfr"]
script/source = "extends CharacterBody2D




@export var speed = 100
@export var damage : int = 1
@export var steering_force = 20 #used to make turning more smooth and flowing
@onready var player = get_parent().get_node(\"Knight\")


var alarmed = false #enemy has state of rest
var rundirection
@export var max_distance = 50
@export var min_distance = 30
@onready var max_distance_area = get_node(\"max_distance_area\")
@onready var min_distance_area = get_node(\"min_distance_area\")
@onready var max_movement_clock = get_node(\"max_movement_clock\")
@onready var min_movement_clock = get_node(\"min_movement_clock\")
@onready var rng = RandomNumberGenerator.new()

func _on_ready():
	max_distance_area.scale.x = max_distance
	min_distance_area.scale.x = min_distance

func _physics_process(delta):
	if is_instance_valid(player) and alarmed:
		var distance_to_player = sqrt(global_position.distance_squared_to(player.global_position))
		if(distance_to_player<min_distance):
			var direction = (player.position-position).normalized()
			min_movement_clock.start(rng.randf_range(0.1,0.4))
			while(!min_movement_clock.is_stopped()):
				velocity = direction*speed
		if(distance_to_player>max_distance):
			var direction = -(player.position-position).normalized()
			max_movement_clock.start(rng.randf_range(0.1,0.4))
			while(!max_movement_clock.is_stopped()):
				velocity = direction*speed
			
			
	move_and_slide()


func _on_alarmed():
	alarmed = true
	

func _run_away():
	var direction = (player.position-position).normalized()
	min_movement_clock.start(rng.randf_range(0.1,0.4))
	while(!min_movement_clock.is_stopped()):
		velocity = direction*speed

func _run_towards():
	var direction = -(player.position-position).normalized()
	max_movement_clock.start(rng.randf_range(0.1,0.4))
	while(!max_movement_clock.is_stopped()):
		velocity = direction*speed

func _on_max_movement_clock_timeout():
	pass # Replace with function body.


func _on_min_movement_clock_timeout():
	pass # Replace with function body.
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_wxj8i"]

[sub_resource type="CircleShape2D" id="CircleShape2D_20ukd"]

[sub_resource type="CircleShape2D" id="CircleShape2D_oxd13"]

[node name="SeedShooter" type="CharacterBody2D"]
collision_layer = 4
collision_mask = 3
script = SubResource("GDScript_2ilfr")

[node name="Sprite2D" type="Sprite2D" parent="."]
texture = ExtResource("1_4o7h1")
hframes = 4
vframes = 2

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_wxj8i")

[node name="max_distance_area" type="Area2D" parent="."]
scale = Vector2(50, 50)
collision_layer = 4
collision_mask = 3

[node name="CollisionShape2D" type="CollisionShape2D" parent="max_distance_area"]
scale = Vector2(0.1, 0.1)
shape = SubResource("CircleShape2D_20ukd")

[node name="min_distance_area" type="Area2D" parent="."]
scale = Vector2(30, 30)
collision_layer = 4
collision_mask = 3

[node name="CollisionShape2D" type="CollisionShape2D" parent="min_distance_area"]
scale = Vector2(0.1, 0.1)
shape = SubResource("CircleShape2D_oxd13")

[node name="max_movement_clock" type="Timer" parent="."]

[node name="min_movement_clock" type="Timer" parent="."]

[connection signal="timeout" from="max_movement_clock" to="." method="_on_max_movement_clock_timeout"]
[connection signal="timeout" from="min_movement_clock" to="." method="_on_min_movement_clock_timeout"]
